import { exec } from "child_process";
import { promisify } from "util";
import axios from "axios";
import { YoutubeTranscript } from "youtube-transcript";
import OpenAI from "openai";

const execAsync = promisify(exec);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const PORT = 5000;

// ---------------- Supported languages ----------------
const SUPPORTED_TRANSCRIPT_LANGS = ["en", "es", "fr", "ar"];
const SUPPORTED_SUMMARY_LANGS = {
  en: "English",
  es: "Spanish",
  fr: "French",
  ar: "Arabic",
};

export const getSupportedLanguages = () => {
  return [
    { code: "en", name: "English" },
    { code: "es", name: "Spanish" },
    { code: "fr", name: "French" },
    { code: "ar", name: "Arabic" }
  ];
};

// ==========================================================
// 🧩 Get transcript (fetch + translate if needed)
// ==========================================================
export const getTranscriptText = async (url, targetLang = "en") => {
  try {
    const videoId = extractVideoId(url);
    if (!videoId) throw new Error("Invalid YouTube URL");

    console.log("🎯 Fetching transcript for video:", videoId);

    let transcript = null;

    // Try fetching transcript in all supported languages
    for (const lang of SUPPORTED_TRANSCRIPT_LANGS) {
      try {
        const items = await YoutubeTranscript.fetchTranscript(videoId, { lang });
        const combined = items.map((i) => i.text).join(" ");
        if (combined.length > 50) {
          transcript = { text: combined, lang };
          console.log(`✅ Transcript fetched in ${lang}`);
          break;
        }
      } catch {}
    }

    // Fallback to metadata if no transcript found
    if (!transcript) {
      console.log("🔎 No transcript available, using metadata fallback...");
      const videoInfo = await getVideoInfoQuick(videoId);
      transcript = { text: videoInfo, lang: "en" };
    }

    // Translate transcript if needed
    const finalText = await translateTranscript(transcript.text, transcript.lang, targetLang);

    return finalText;
  } catch (error) {
    console.error("❌ Transcript error:", error.message);
    throw error;
  }
};

// Translate transcript
async function translateTranscript(text, fromLang, toLang) {
  if (fromLang === toLang) return text;
  try {
    const prompt = `
Translate the following text from ${fromLang} to ${toLang}. 
Keep all meaning intact and natural phrasing. 
Text:
${text.substring(0, 8000)}
`;
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
      max_tokens: 8000,
    });
    return response.choices[0].message.content;
  } catch (err) {
    console.error("⚠️ Translation failed:", err.message);
    return text;
  }
}

// ==========================================================
// 🧩 Summarize transcript in multiple languages
// ==========================================================
export const summarizeTranscriptMultilingual = async (text, languageCode = "en", videoUrl = "") => {
  try {
    const languageName = SUPPORTED_SUMMARY_LANGS[languageCode] || "English";
    const prompt = `
You are an AI that summarizes YouTube content. 
Summarize the following text in ${languageName} in 5-7 key bullet points:
${text.substring(0, 8000)}
`;
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 1000,
      temperature: 0.3,
    });
    return response.choices[0].message.content;
  } catch (err) {
    console.error("❌ Multilingual summary error:", err.message);
    return `⚠️ Summary unavailable in ${SUPPORTED_SUMMARY_LANGS[languageCode] || "English"}`;
  }
};

// ==========================================================
// 🧩 Convert summary to TXT
// ==========================================================
export const convertSummaryToTXT = (summary, languageCode = "en") => {
  try {
    const lines = summary.split("\n").filter((line) => line.trim().length > 0);
    let txtContent = `🎬 Video Summary (${languageCode.toUpperCase()})\n`;
    txtContent += `====================================\n\n`;

    lines.forEach((line, index) => {
      const cleanLine = line.replace(/^[•\-*\d.]\s*/, "").trim();
      if (cleanLine.length > 0) {
        txtContent += `${index + 1}. ${cleanLine}\n`;
      }
    });

    txtContent += `\n====================================\n`;
    txtContent += `✅ Generated by AI Video Summarizer`;

    return txtContent;
  } catch (err) {
    console.error("❌ TXT conversion error:", err.message);
    return `Error creating TXT file: ${err.message}`;
  }
};

// ==========================================================
// 🧩 Quick metadata-based summary
// ==========================================================
export const quickVideoSummary = async (videoUrl) => {
  try {
    const videoId = extractVideoId(videoUrl);
    if (!videoId) throw new Error("Invalid YouTube URL");

    const cmd = `yt-dlp --skip-download --print-json "https://youtu.be/${videoId}"`;
    const { stdout: videoInfo } = await execAsync(cmd, { timeout: 10000 });
    const info = JSON.parse(videoInfo);

    const prompt = `
Summarize this YouTube video metadata in 4-5 bullet points:
Title: ${info.title || "No title"}
Description: ${info.description?.substring(0, 400) || "No description"}
Channel: ${info.uploader || "Unknown"}
Duration: ${info.duration_string || "Unknown"}
Categories: ${info.categories?.join(", ") || "N/A"}
Tags: ${info.tags?.slice(0, 10).join(", ") || "N/A"}
`;
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 400,
      temperature: 0.3,
    });
    return response.choices[0].message.content;
  } catch (err) {
    console.error("⚠️ Quick summary error:", err.message);
    return "Quick summary unavailable. Video may be private or URL invalid.";
  }
};

// ==========================================================
// 🧩 Video info fallback
// ==========================================================
async function getVideoInfoQuick(videoId) {
  const url = `https://youtu.be/${videoId}`;
  try {
    const { stdout } = await execAsync(`yt-dlp --skip-download --print-json "${url}"`, {
      timeout: 20000,
      maxBuffer: 10 * 1024 * 1024,
    });
    const info = JSON.parse(stdout);
    let transcript = "";
    if (info.title) transcript += `🎥 Title: ${info.title}\n\n`;
    if (info.description) transcript += `📝 Description:\n${info.description}\n\n`;
    if (info.tags?.length) transcript += `🏷️ Tags: ${info.tags.join(", ")}\n\n`;
    if (info.categories?.length) transcript += `📂 Categories: ${info.categories.join(", ")}\n`;
    return transcript || "No video information available";
  } catch (err) {
    console.error("⚠️ Video info fetch failed:", err.message);
    return "No video information available";
  }
}

// ==========================================================
// 🧩 Extract video ID
// ==========================================================
function extractVideoId(url) {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&?\s]+)/,
    /youtube\.com\/embed\/([^&?\s]+)/,
    /youtube\.com\/v\/([^&?\s]+)/,
  ];
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match?.[1]) return match[1];
  }
  return null;
}

// ==========================================================
// 🧩 Dummy timestamps
// ==========================================================
export const getTranscriptTimestamps = async () => ({ start: "00:01:00", end: "00:02:00" });
